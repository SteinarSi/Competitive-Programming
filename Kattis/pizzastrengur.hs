{-# LANGUAGE OverloadedStrings #-}

import           Control.Arrow            (first, (>>>))
import qualified Data.ByteString.Char8 as C
import           Data.Functor             ((<&>))
import           Data.List                (delete)
import           Data.Maybe               (fromJust)
import           System.IO                (hFlush, stdout)

main :: IO ()
main = do
    n <- C.getLine <&> (C.readInt >>> fromJust >>> fst)
    guess n "" randoms "PIZA"

guess :: Int -> C.ByteString -> [Int] -> [Char] -> IO ()
guess 0 prefix _ _ = C.putStrLn prefix
guess n prefix gen [c] = guess (n-1) (C.snoc prefix c) gen "PIZA"
guess n prefix (i:gen) options = do
    let next = options !! (i `mod` length options)
        attempt = C.snoc prefix next
    C.putStrLn attempt
    hFlush stdout
    response <- C.getLine
    case response of
        "0" -> guess n prefix gen (delete next options)
        "1" -> guess (n-1) attempt gen "PIZA"
        "2" -> pure ()

randoms :: [Int]
randoms = cycle [560,663,95,783,208,466,913,535,651,95,500,306,699,901,398,809,760,606,348,603,237,127,66,521,331,667,122,536,657,224,330,162,738,747,543,936,987,546,466,701,72,619,381,662,952,887,415,38,142,771,97,86,336,178,219,333,321,971,678,570,131,250,443,647,644,361,541,492,738,269,492,670,476,27,695,185,274,448,707,968,300,284,610,809,581,883,402,946,445,808,339,985,941,495,136,82,463,598,527,318,462,388,557,106,48,122,759,690,94,302,139,897,819,361,319,311,47,87,416,129,177,225,940,859,117,992,684,1,830,938,564,771,318,902,391,615,857,934,933,796,943,495,203,120,963,125,88,28,459,468,237,335,826,145,291,43,209,581,482,567,253,146,665,786,466,278,473,249,363,457,240,924,844,348,435,291,704,253,286,777,650,324,365,202,123,959,853,537,463,556,977,721,123,931,214,95,705,998,501,824,234,852,239,913,572,7,591,559,38,667,259,394,216,630,995,638,655,141,91,420,280,160,555,718,359,822,735,134,415,51,768,781,874,854,331,894,238,397,887,665,933,9,513,858,745,216,769,50,170,819,79,35,909,850,495,378,190,989,731,231,585,346,324,481,11,598,222,647,245,514,417,419,690,363,885,669,106,147,555,696,13,757,417,481,828,823,620,984,140,896,12,188,784,162,949,78,931,580,900,36,44,530,634,365,489,546,516,679,551,812,322,565,830,336,777,77,390,620,137,929,655,219,728,412,15,989,335,934,705,90,737,160,426,510,814,407,898,779,507,240,898,476,369,404,361,753,211,956,788,181,87,462,533,159,422,407,72,762,24,558,0,926,117,969,624,846,70,405,560,215,422,142,521,711,616,146,860,209,96,537,582,705,302,764,824,652,637,827,20,776,917,735,613,234,442,927,712,763,535,702,899,271,765,994,726,630,740,548,459,868,753,582,941,725,549,759,663,610,363,513,285,54,537,252,843,62,874,824,344,731,971,874,597,237,83,922,922,411,648,471,156,797,213,581,923,41,85,13,452,900,422,53,838,440,892,19,718,91,42,874,66,129,896,445,452,954,719,18,252,121,614,758,251,227,605,768,282,869,798,569,230,4,194,46,85,704,187,278,113,33,59,124,540,159,403,911,406,531,664,594,666,330,907,488,32,701,452,859,174,725,518,971,476,983,874,52,647,114,608,993,215,517,333,817,749,511,138,784,115,450,501,920,323,789,372,121,921,949,852,600,130,469,729,227,225,848,383,950,980,250,187,753,799,207,56,638,574,469,996,453,472,338,550,451,77,469,305,675,559,938,182,329,1,612,451,370,962,318,348,63,239,367,463,891,657,84,765,832,202,240,354,939,559,621,292,895,304,852,700,832,58,458,976,143,275,497,195,109,854,373,751,139,340,639,731,78,7,352,32,477,0,934,218,893,79,251,644,679,544,150,390,21,829,890,184,415,392,835,228,373,334,517,220,550,655,210,361,998,112,234,367,751,313,637,989,782,376,883,871,145,773,179,805,395,567,452,135,359,26,402,725,992,70,674,44,835,472,717,701,905,680,431,68,219,692,921,177,525,493,831,378,809,167,443,17,459,623,291,499,317,938,348,392,270,690,114,926,438,573,212,457,842,988,44,347,95,97,547,412,124,833,952,702,132,870,175,296,671,74,278,112,283,576,584,294,677,32,488,958,558,327,163,405,145,705,196,166,745,630,89,275,177,453,985,317,85,178,708,416,65,921,301,851,607,517,269,986,949,890,120,563,443,612,933,144,398,677,316,103,833,28,471,280,156,293,974,981,55,402,735,503,843,61,687,354,917,752,733,401,285,96,393,310,446,52,311,828,961,729,51,61,599,245,987,16,752,432,663,824,103,960,47,675,906,35,959,442,152,390,202,886,795,479,135,462,579,969,485,166,55,981,972,867,284,730,908,315,427,845,159,624,556,664,693,782,768,984,447,162,194,343,986,539,775,105,788,648,918,303,809,911,811,507,452,77,371,218,756,820,499,401,152,231,83,930,588,346,915,117,790,236,20,274,110,979,347,118,220,70,799,548,134,420,968,988,953,379,117,622,283,678,418,445,992,45,446,392,124,658,512,99,660,903,874,636,889,263,168,674,890,754,246,732,789,74,640,765,960,625,548,400,338,293,670,529,785,97,66,289,7,286,870,831,917,866,77,832,547,660,44,205,756,741,684,333,277,628,237,830,85,849,696,581,956,180,863,290,154,277,36,17,775,805,544,237,992,22,668,213,138,67,128,428,704,871,935,592,281,146,15]
