import           Control.Arrow    ((>>>))
import           Control.Monad    (forM_)
import           Control.Monad.ST (ST)
import           Data.Array       (Array, array, (!))
import           Data.Array.Base  (newArray, writeArray)
import           Data.Array.ST    (runSTArray)

main :: IO ()
main = getLine >>= (
            read
        >>> solve
        >>> putStrLn
    )

solve :: Int -> String
solve x = format h ++ ":" ++ format m
    where (h,m) = deg2time ! (x `div` 5)
          format x | x < 10    = '0' : show x
                   | otherwise = show x

-- Literally just a hardcoded version.
deg2time :: Array Int (Int,Int)
deg2time = array (0,719) [(0,(0,0)),(1,(2,11)),(2,(4,22)),(3,(6,33)),(4,(8,44)),(5,(10,55)),(6,(1,6)),(7,(3,17)),(8,(5,28)),(9,(7,39)),(10,(9,50)),(11,(0,1)),(12,(2,12)),(13,(4,23)),(14,(6,34)),(15,(8,45)),(16,(10,56)),(17,(1,7)),(18,(3,18)),(19,(5,29)),(20,(7,40)),(21,(9,51)),(22,(0,2)),(23,(2,13)),(24,(4,24)),(25,(6,35)),(26,(8,46)),(27,(10,57)),(28,(1,8)),(29,(3,19)),(30,(5,30)),(31,(7,41)),(32,(9,52)),(33,(0,3)),(34,(2,14)),(35,(4,25)),(36,(6,36)),(37,(8,47)),(38,(10,58)),(39,(1,9)),(40,(3,20)),(41,(5,31)),(42,(7,42)),(43,(9,53)),(44,(0,4)),(45,(2,15)),(46,(4,26)),(47,(6,37)),(48,(8,48)),(49,(10,59)),(50,(1,10)),(51,(3,21)),(52,(5,32)),(53,(7,43)),(54,(9,54)),(55,(0,5)),(56,(2,16)),(57,(4,27)),(58,(6,38)),(59,(8,49)),(60,(11,0)),(61,(1,11)),(62,(3,22)),(63,(5,33)),(64,(7,44)),(65,(9,55)),(66,(0,6)),(67,(2,17)),(68,(4,28)),(69,(6,39)),(70,(8,50)),(71,(11,1)),(72,(1,12)),(73,(3,23)),(74,(5,34)),(75,(7,45)),(76,(9,56)),(77,(0,7)),(78,(2,18)),(79,(4,29)),(80,(6,40)),(81,(8,51)),(82,(11,2)),(83,(1,13)),(84,(3,24)),(85,(5,35)),(86,(7,46)),(87,(9,57)),(88,(0,8)),(89,(2,19)),(90,(4,30)),(91,(6,41)),(92,(8,52)),(93,(11,3)),(94,(1,14)),(95,(3,25)),(96,(5,36)),(97,(7,47)),(98,(9,58)),(99,(0,9)),(100,(2,20)),(101,(4,31)),(102,(6,42)),(103,(8,53)),(104,(11,4)),(105,(1,15)),(106,(3,26)),(107,(5,37)),(108,(7,48)),(109,(9,59)),(110,(0,10)),(111,(2,21)),(112,(4,32)),(113,(6,43)),(114,(8,54)),(115,(11,5)),(116,(1,16)),(117,(3,27)),(118,(5,38)),(119,(7,49)),(120,(10,0)),(121,(0,11)),(122,(2,22)),(123,(4,33)),(124,(6,44)),(125,(8,55)),(126,(11,6)),(127,(1,17)),(128,(3,28)),(129,(5,39)),(130,(7,50)),(131,(10,1)),(132,(0,12)),(133,(2,23)),(134,(4,34)),(135,(6,45)),(136,(8,56)),(137,(11,7)),(138,(1,18)),(139,(3,29)),(140,(5,40)),(141,(7,51)),(142,(10,2)),(143,(0,13)),(144,(2,24)),(145,(4,35)),(146,(6,46)),(147,(8,57)),(148,(11,8)),(149,(1,19)),(150,(3,30)),(151,(5,41)),(152,(7,52)),(153,(10,3)),(154,(0,14)),(155,(2,25)),(156,(4,36)),(157,(6,47)),(158,(8,58)),(159,(11,9)),(160,(1,20)),(161,(3,31)),(162,(5,42)),(163,(7,53)),(164,(10,4)),(165,(0,15)),(166,(2,26)),(167,(4,37)),(168,(6,48)),(169,(8,59)),(170,(11,10)),(171,(1,21)),(172,(3,32)),(173,(5,43)),(174,(7,54)),(175,(10,5)),(176,(0,16)),(177,(2,27)),(178,(4,38)),(179,(6,49)),(180,(9,0)),(181,(11,11)),(182,(1,22)),(183,(3,33)),(184,(5,44)),(185,(7,55)),(186,(10,6)),(187,(0,17)),(188,(2,28)),(189,(4,39)),(190,(6,50)),(191,(9,1)),(192,(11,12)),(193,(1,23)),(194,(3,34)),(195,(5,45)),(196,(7,56)),(197,(10,7)),(198,(0,18)),(199,(2,29)),(200,(4,40)),(201,(6,51)),(202,(9,2)),(203,(11,13)),(204,(1,24)),(205,(3,35)),(206,(5,46)),(207,(7,57)),(208,(10,8)),(209,(0,19)),(210,(2,30)),(211,(4,41)),(212,(6,52)),(213,(9,3)),(214,(11,14)),(215,(1,25)),(216,(3,36)),(217,(5,47)),(218,(7,58)),(219,(10,9)),(220,(0,20)),(221,(2,31)),(222,(4,42)),(223,(6,53)),(224,(9,4)),(225,(11,15)),(226,(1,26)),(227,(3,37)),(228,(5,48)),(229,(7,59)),(230,(10,10)),(231,(0,21)),(232,(2,32)),(233,(4,43)),(234,(6,54)),(235,(9,5)),(236,(11,16)),(237,(1,27)),(238,(3,38)),(239,(5,49)),(240,(8,0)),(241,(10,11)),(242,(0,22)),(243,(2,33)),(244,(4,44)),(245,(6,55)),(246,(9,6)),(247,(11,17)),(248,(1,28)),(249,(3,39)),(250,(5,50)),(251,(8,1)),(252,(10,12)),(253,(0,23)),(254,(2,34)),(255,(4,45)),(256,(6,56)),(257,(9,7)),(258,(11,18)),(259,(1,29)),(260,(3,40)),(261,(5,51)),(262,(8,2)),(263,(10,13)),(264,(0,24)),(265,(2,35)),(266,(4,46)),(267,(6,57)),(268,(9,8)),(269,(11,19)),(270,(1,30)),(271,(3,41)),(272,(5,52)),(273,(8,3)),(274,(10,14)),(275,(0,25)),(276,(2,36)),(277,(4,47)),(278,(6,58)),(279,(9,9)),(280,(11,20)),(281,(1,31)),(282,(3,42)),(283,(5,53)),(284,(8,4)),(285,(10,15)),(286,(0,26)),(287,(2,37)),(288,(4,48)),(289,(6,59)),(290,(9,10)),(291,(11,21)),(292,(1,32)),(293,(3,43)),(294,(5,54)),(295,(8,5)),(296,(10,16)),(297,(0,27)),(298,(2,38)),(299,(4,49)),(300,(7,0)),(301,(9,11)),(302,(11,22)),(303,(1,33)),(304,(3,44)),(305,(5,55)),(306,(8,6)),(307,(10,17)),(308,(0,28)),(309,(2,39)),(310,(4,50)),(311,(7,1)),(312,(9,12)),(313,(11,23)),(314,(1,34)),(315,(3,45)),(316,(5,56)),(317,(8,7)),(318,(10,18)),(319,(0,29)),(320,(2,40)),(321,(4,51)),(322,(7,2)),(323,(9,13)),(324,(11,24)),(325,(1,35)),(326,(3,46)),(327,(5,57)),(328,(8,8)),(329,(10,19)),(330,(0,30)),(331,(2,41)),(332,(4,52)),(333,(7,3)),(334,(9,14)),(335,(11,25)),(336,(1,36)),(337,(3,47)),(338,(5,58)),(339,(8,9)),(340,(10,20)),(341,(0,31)),(342,(2,42)),(343,(4,53)),(344,(7,4)),(345,(9,15)),(346,(11,26)),(347,(1,37)),(348,(3,48)),(349,(5,59)),(350,(8,10)),(351,(10,21)),(352,(0,32)),(353,(2,43)),(354,(4,54)),(355,(7,5)),(356,(9,16)),(357,(11,27)),(358,(1,38)),(359,(3,49)),(360,(6,0)),(361,(8,11)),(362,(10,22)),(363,(0,33)),(364,(2,44)),(365,(4,55)),(366,(7,6)),(367,(9,17)),(368,(11,28)),(369,(1,39)),(370,(3,50)),(371,(6,1)),(372,(8,12)),(373,(10,23)),(374,(0,34)),(375,(2,45)),(376,(4,56)),(377,(7,7)),(378,(9,18)),(379,(11,29)),(380,(1,40)),(381,(3,51)),(382,(6,2)),(383,(8,13)),(384,(10,24)),(385,(0,35)),(386,(2,46)),(387,(4,57)),(388,(7,8)),(389,(9,19)),(390,(11,30)),(391,(1,41)),(392,(3,52)),(393,(6,3)),(394,(8,14)),(395,(10,25)),(396,(0,36)),(397,(2,47)),(398,(4,58)),(399,(7,9)),(400,(9,20)),(401,(11,31)),(402,(1,42)),(403,(3,53)),(404,(6,4)),(405,(8,15)),(406,(10,26)),(407,(0,37)),(408,(2,48)),(409,(4,59)),(410,(7,10)),(411,(9,21)),(412,(11,32)),(413,(1,43)),(414,(3,54)),(415,(6,5)),(416,(8,16)),(417,(10,27)),(418,(0,38)),(419,(2,49)),(420,(5,0)),(421,(7,11)),(422,(9,22)),(423,(11,33)),(424,(1,44)),(425,(3,55)),(426,(6,6)),(427,(8,17)),(428,(10,28)),(429,(0,39)),(430,(2,50)),(431,(5,1)),(432,(7,12)),(433,(9,23)),(434,(11,34)),(435,(1,45)),(436,(3,56)),(437,(6,7)),(438,(8,18)),(439,(10,29)),(440,(0,40)),(441,(2,51)),(442,(5,2)),(443,(7,13)),(444,(9,24)),(445,(11,35)),(446,(1,46)),(447,(3,57)),(448,(6,8)),(449,(8,19)),(450,(10,30)),(451,(0,41)),(452,(2,52)),(453,(5,3)),(454,(7,14)),(455,(9,25)),(456,(11,36)),(457,(1,47)),(458,(3,58)),(459,(6,9)),(460,(8,20)),(461,(10,31)),(462,(0,42)),(463,(2,53)),(464,(5,4)),(465,(7,15)),(466,(9,26)),(467,(11,37)),(468,(1,48)),(469,(3,59)),(470,(6,10)),(471,(8,21)),(472,(10,32)),(473,(0,43)),(474,(2,54)),(475,(5,5)),(476,(7,16)),(477,(9,27)),(478,(11,38)),(479,(1,49)),(480,(4,0)),(481,(6,11)),(482,(8,22)),(483,(10,33)),(484,(0,44)),(485,(2,55)),(486,(5,6)),(487,(7,17)),(488,(9,28)),(489,(11,39)),(490,(1,50)),(491,(4,1)),(492,(6,12)),(493,(8,23)),(494,(10,34)),(495,(0,45)),(496,(2,56)),(497,(5,7)),(498,(7,18)),(499,(9,29)),(500,(11,40)),(501,(1,51)),(502,(4,2)),(503,(6,13)),(504,(8,24)),(505,(10,35)),(506,(0,46)),(507,(2,57)),(508,(5,8)),(509,(7,19)),(510,(9,30)),(511,(11,41)),(512,(1,52)),(513,(4,3)),(514,(6,14)),(515,(8,25)),(516,(10,36)),(517,(0,47)),(518,(2,58)),(519,(5,9)),(520,(7,20)),(521,(9,31)),(522,(11,42)),(523,(1,53)),(524,(4,4)),(525,(6,15)),(526,(8,26)),(527,(10,37)),(528,(0,48)),(529,(2,59)),(530,(5,10)),(531,(7,21)),(532,(9,32)),(533,(11,43)),(534,(1,54)),(535,(4,5)),(536,(6,16)),(537,(8,27)),(538,(10,38)),(539,(0,49)),(540,(3,0)),(541,(5,11)),(542,(7,22)),(543,(9,33)),(544,(11,44)),(545,(1,55)),(546,(4,6)),(547,(6,17)),(548,(8,28)),(549,(10,39)),(550,(0,50)),(551,(3,1)),(552,(5,12)),(553,(7,23)),(554,(9,34)),(555,(11,45)),(556,(1,56)),(557,(4,7)),(558,(6,18)),(559,(8,29)),(560,(10,40)),(561,(0,51)),(562,(3,2)),(563,(5,13)),(564,(7,24)),(565,(9,35)),(566,(11,46)),(567,(1,57)),(568,(4,8)),(569,(6,19)),(570,(8,30)),(571,(10,41)),(572,(0,52)),(573,(3,3)),(574,(5,14)),(575,(7,25)),(576,(9,36)),(577,(11,47)),(578,(1,58)),(579,(4,9)),(580,(6,20)),(581,(8,31)),(582,(10,42)),(583,(0,53)),(584,(3,4)),(585,(5,15)),(586,(7,26)),(587,(9,37)),(588,(11,48)),(589,(1,59)),(590,(4,10)),(591,(6,21)),(592,(8,32)),(593,(10,43)),(594,(0,54)),(595,(3,5)),(596,(5,16)),(597,(7,27)),(598,(9,38)),(599,(11,49)),(600,(2,0)),(601,(4,11)),(602,(6,22)),(603,(8,33)),(604,(10,44)),(605,(0,55)),(606,(3,6)),(607,(5,17)),(608,(7,28)),(609,(9,39)),(610,(11,50)),(611,(2,1)),(612,(4,12)),(613,(6,23)),(614,(8,34)),(615,(10,45)),(616,(0,56)),(617,(3,7)),(618,(5,18)),(619,(7,29)),(620,(9,40)),(621,(11,51)),(622,(2,2)),(623,(4,13)),(624,(6,24)),(625,(8,35)),(626,(10,46)),(627,(0,57)),(628,(3,8)),(629,(5,19)),(630,(7,30)),(631,(9,41)),(632,(11,52)),(633,(2,3)),(634,(4,14)),(635,(6,25)),(636,(8,36)),(637,(10,47)),(638,(0,58)),(639,(3,9)),(640,(5,20)),(641,(7,31)),(642,(9,42)),(643,(11,53)),(644,(2,4)),(645,(4,15)),(646,(6,26)),(647,(8,37)),(648,(10,48)),(649,(0,59)),(650,(3,10)),(651,(5,21)),(652,(7,32)),(653,(9,43)),(654,(11,54)),(655,(2,5)),(656,(4,16)),(657,(6,27)),(658,(8,38)),(659,(10,49)),(660,(1,0)),(661,(3,11)),(662,(5,22)),(663,(7,33)),(664,(9,44)),(665,(11,55)),(666,(2,6)),(667,(4,17)),(668,(6,28)),(669,(8,39)),(670,(10,50)),(671,(1,1)),(672,(3,12)),(673,(5,23)),(674,(7,34)),(675,(9,45)),(676,(11,56)),(677,(2,7)),(678,(4,18)),(679,(6,29)),(680,(8,40)),(681,(10,51)),(682,(1,2)),(683,(3,13)),(684,(5,24)),(685,(7,35)),(686,(9,46)),(687,(11,57)),(688,(2,8)),(689,(4,19)),(690,(6,30)),(691,(8,41)),(692,(10,52)),(693,(1,3)),(694,(3,14)),(695,(5,25)),(696,(7,36)),(697,(9,47)),(698,(11,58)),(699,(2,9)),(700,(4,20)),(701,(6,31)),(702,(8,42)),(703,(10,53)),(704,(1,4)),(705,(3,15)),(706,(5,26)),(707,(7,37)),(708,(9,48)),(709,(11,59)),(710,(2,10)),(711,(4,21)),(712,(6,32)),(713,(8,43)),(714,(10,54)),(715,(1,5)),(716,(3,16)),(717,(5,27)),(718,(7,38)),(719,(9,49))]

generated :: Array Int (Int,Int)
generated = runSTArray $ do
    arr <- newArray (0,3595 `div` 5) (-1,-1)
    forM_ [(h,m) | h <- [0..11], m <- [0..59]] (\hm -> writeArray arr (convert hm `div` 5) hm)
    pure arr

convert :: (Int,Int) -> Int
convert (hours, minutes) = (round (10 * (m-h)) + 3600) `mod` 3600
    where
        h = (360 * fromIntegral hours + m) / 12
        m = 360 * fromIntegral minutes / 60
